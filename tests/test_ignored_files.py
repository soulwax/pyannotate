# File: tests/test_ignored_files.py

"""Tests for the IGNORED_FILES functionality."""

from pathlib import Path

import pytest

from pyannotate.annotate_headers import IGNORED_FILES, process_file, walk_directory
from tests.test_utils import cleanup_test_directory, create_temp_test_directory

# Directory for temporary test files
TEST_DIR = Path("tests/ignored_files_test")


@pytest.fixture(scope="module", autouse=True)
def setup_and_teardown():
    """Setup test environment and cleanup after tests."""
    create_temp_test_directory(TEST_DIR)
    yield
    cleanup_test_directory(TEST_DIR)


def test_prettierrc_ignored():
    """Test that .prettierrc files are ignored."""
    prettierrc_file = TEST_DIR / ".prettierrc"
    original_content = """{
  "semi": false,
  "singleQuote": true,
  "trailingComma": "es5"
}"""
    prettierrc_file.write_text(original_content)

    process_file(prettierrc_file, TEST_DIR)

    processed_content = prettierrc_file.read_text()
    assert (
        processed_content == original_content
    ), ".prettierrc file was modified but should be ignored"


def test_eslintrc_ignored():
    """Test that .eslintrc files are ignored."""
    eslintrc_file = TEST_DIR / ".eslintrc"
    original_content = """{
  "extends": ["eslint:recommended"],
  "env": {
    "node": true,
    "es2020": true
  },
  "rules": {
    "no-console": "warn"
  }
}"""
    eslintrc_file.write_text(original_content)

    process_file(eslintrc_file, TEST_DIR)

    processed_content = eslintrc_file.read_text()
    assert (
        processed_content == original_content
    ), ".eslintrc file was modified but should be ignored"


def test_babelrc_ignored():
    """Test that .babelrc files are ignored."""
    babelrc_file = TEST_DIR / ".babelrc"
    original_content = """{
  "presets": ["@babel/preset-env", "@babel/preset-react"],
  "plugins": ["@babel/plugin-proposal-class-properties"]
}"""
    babelrc_file.write_text(original_content)

    process_file(babelrc_file, TEST_DIR)

    processed_content = babelrc_file.read_text()
    assert processed_content == original_content, ".babelrc file was modified but should be ignored"


def test_package_lock_json_ignored():
    """Test that package-lock.json files are ignored."""
    package_lock_file = TEST_DIR / "package-lock.json"
    original_content = """{
  "name": "test-project",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "test-project",
      "version": "1.0.0"
    }
  }
}"""
    package_lock_file.write_text(original_content)

    process_file(package_lock_file, TEST_DIR)

    processed_content = package_lock_file.read_text()
    assert (
        processed_content == original_content
    ), "package-lock.json file was modified but should be ignored"


def test_yarn_lock_ignored():
    """Test that yarn.lock files are ignored."""
    yarn_lock_file = TEST_DIR / "yarn.lock"
    original_content = """# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
"""
    yarn_lock_file.write_text(original_content)

    process_file(yarn_lock_file, TEST_DIR)

    processed_content = yarn_lock_file.read_text()
    assert (
        processed_content == original_content
    ), "yarn.lock file was modified but should be ignored"


def test_env_files_ignored():
    """Test that various .env files are ignored."""
    env_files = [".env.example", ".env.local", ".env.development", ".env.production"]

    for env_file_name in env_files:
        env_file = TEST_DIR / env_file_name
        original_content = "NODE_ENV=development\nAPI_KEY=your_api_key_here\n"
        env_file.write_text(original_content)

        process_file(env_file, TEST_DIR)

        processed_content = env_file.read_text()
        assert (
            processed_content == original_content
        ), f"{env_file_name} file was modified but should be ignored"


def test_license_files_ignored():
    """Test that LICENSE-style files are ignored."""
    license_files = ["LICENSE", "COPYING", "NOTICE"]

    for license_file_name in license_files:
        license_file = TEST_DIR / license_file_name
        original_content = "MIT License\n\nCopyright..."
        license_file.write_text(original_content)

        process_file(license_file, TEST_DIR)

        processed_content = license_file.read_text()
        assert (
            processed_content == original_content
        ), f"{license_file_name} file was modified but should be ignored"


def test_ignored_files_constant_contains_common_entries():
    """Check a representative subset of entries exist in
    IGNORED_FILES (avoid duplicating src list)."""
    # Use a small subset to avoid duplicate-code against the source constant
    subset = {".prettierrc", ".eslintrc", ".babelrc", "package-lock.json", "LICENSE", "NOTICE"}
    missing = [name for name in subset if name not in IGNORED_FILES]
    assert not missing, f"Expected files missing in IGNORED_FILES: {missing}"


def test_regular_files_still_processed():
    """Test that regular files are still processed normally."""
    js_file = TEST_DIR / "regular.js"
    original_content = 'console.log("This should get a header");\n'
    js_file.write_text(original_content)

    walk_directory(TEST_DIR, TEST_DIR)

    processed_content = js_file.read_text()
    assert processed_content.startswith(
        "// File: regular.js"
    ), "Regular JS file should get a header"
    assert "console.log" in processed_content, "Original content should be preserved"


def test_multiple_ignored_files_in_directory():
    """Test processing a directory with multiple ignored files."""
    # Create multiple ignored files
    ignored_files_content = {
        ".prettierrc": '{"semi": false}',
        ".eslintrc": '{"extends": ["eslint:recommended"]}',
        "package-lock.json": '{"name": "test", "version": "1.0.0"}',
        ".env.example": "NODE_ENV=development",
    }

    # Create a regular file that should be processed
    regular_file = TEST_DIR / "app.py"
    regular_file.write_text("print('Hello, World!')")

    # Create ignored files
    for filename, content in ignored_files_content.items():
        file_path = TEST_DIR / filename
        file_path.write_text(content)

    # Process the entire directory
    walk_directory(TEST_DIR, TEST_DIR)

    # Verify ignored files are unchanged
    for filename, original_content in ignored_files_content.items():
        file_path = TEST_DIR / filename
        processed_content = file_path.read_text()
        assert (
            processed_content == original_content
        ), f"{filename} was modified but should be ignored"

    # Verify regular file got processed
    processed_regular = regular_file.read_text()
    assert processed_regular.startswith("# File: app.py"), "Regular Python file should get a header"
